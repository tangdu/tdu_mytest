网络爬虫之网页更新的判断策略
摘要：做搜索引擎的时候，网络爬虫（WebSpider)对于有更新的页面才会重新下载。如何判断网页是否更
新就需要采取一定的方法，本文简要的探讨了判断网页跟新的2个策略。
关键字：网页跟新，LastModified,ETag,MD5数字签名
           编写搜索引擎程序的时候，我们需要判断一个网页是否已经更新。有更新的页面就得重新下载再次
建立索引，而没有更新的页面就没必要重新索引，从而节约系统资源。
1、使用HTTP协议头
           通产情况下，下载网页我们使用HTTP协议，向服务器发送HEAD请求，可以得到页面的最后修改时
间LastModifed,或者标签ETag。将这两个变量和上次下载记录的值的比较就可以知道一个网页是否跟新。
这个策略对于静态网页是有效的。但是对于绝大多数动态网页如ASP，JSP来说，LastModifed就是服务器
发送Response的时间，并非网页的最后跟新时间，而Etag通常为空值。所以对于动态网页使用
LastModifed和Etag来判断是不合适的。
2、使用MD5数字签名
           每次下载网页时，把服务器返回的数据流ResponseStream先放在内存缓冲区，然后对
ResponseStream生成MD5数字签名S1，下次下载同样生成签名S2,比较S2和S1，如果相同，则页面没有
跟新，否则网页就有跟新。需要说明的是用md5算法对文本刘签名的速度是极快的，M级的数据可以在毫秒
内完成。这种策略虽然也把页面数据从服务器传输到了本地机，但是省掉了页面的I/O操作，对系统性能的
提升是很有帮助的。
附对数据流md5签名的c#代码：
/// <summary>
    /// 计算哈希值,
    /// 来自网络,并做适当的改造
    /// http://www.cnblogs.com/easydata/archive/2008/09/09/1287331.html
    /// </summary>
    public class HashCode
    {
        public static string Generate(string str)
        {
            System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(str);
            bytes = md5.ComputeHash(bytes);
            md5.Clear();
            string ret = "";
            for (int i = 0; i < bytes.Length; i++)
            {
                ret += Convert.ToString(bytes[i], 16).PadLeft(2, '0');
            }
            return ret.PadLeft(32, '0');
        }
        public static string Generate(System.IO.Stream stream)
        {
            Byte[] hashBytes = HashData(stream, "md5");
            return ByteArrayToHexString(hashBytes);
        }
        /// <summary>        
        /// 计算哈希值        
        /// </summary>        
        /// <param name="stream">要计算哈希值的 Stream</param>        
        /// <param name="algName">算法:sha1,md5</param>        
        /// <returns>哈希值字节数组</returns>        
        private static byte[] HashData(System.IO.Stream stream, string algName)
        {
            stream.Seek(0, System.IO.SeekOrigin.Begin);
            System.Security.Cryptography.HashAlgorithm algorithm;
            if (algName == null)
            {
                throw new ArgumentNullException("algName 不能为 null");
            } 
            if (string.Compare(algName, "sha1",true) == 0)
            { 
                algorithm = System.Security.Cryptography.SHA1.Create(); 
            }
            else
            {
                if (string.Compare(algName, "md5", true) != 0)
                {
                    throw new Exception("algName 只能使用 sha1 或 md5");
                } 
                algorithm = System.Security.Cryptography.MD5.Create();
            }
            return algorithm.ComputeHash(stream);
        }
        /// <summary>        
        /// 字节数组转换为16进制表示的字符串        
        /// </summary>        
        private static string ByteArrayToHexString(byte[] buf)
        {
            return BitConverter.ToString(buf).Replace("-", "");
        }
    }
以上代码VS2005编译通过
转载请注明出处：百度空间 ~纯净的天空~